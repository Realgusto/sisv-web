generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String
  admin       Boolean       @default(false)
  active      Boolean       @default(true)
  updated_at  DateTime      @default(now())
  purchases   Purchase[]    @relation("UserPurchases")
  UserCompany UserCompany[]
  Company     Company[]     @relation("UserCompanies")
}

model Purchase {
  id            String    @id @default(cuid())
  companyId     String
  company       Company   @relation("Company", fields: [companyId], references: [id])
  date          DateTime
  delivery_date DateTime
  supplier      String?
  product       String
  quantity      Int
  value         Float?
  department    String?
  observations  String?
  status        Status?
  user_id       String
  updated_at    DateTime? @default(now()) @updatedAt
  user          User      @relation("UserPurchases", fields: [user_id], references: [id])
}

model Overview {
  id                String  @id
  companyId         String
  company           Company @relation("Company", fields: [companyId], references: [id])
  salesMonthly      Float
  averageTicket     Float
  salesLastYear     Json[]
  top5BestSeller    Json[]
  activeCustomers   Int
  inactiveCustomers Int
  expenses          Float
  shopping          Float
  payment           Float   @default(0)
  receipt           Float   @default(0)
}

model Company {
  id          String        @id
  cnpj        String        @unique
  name        String
  fantasy     String
  address     String
  city        String
  state       String
  phone       String
  email       String
  active      Boolean       @default(true)
  updated_at  DateTime      @default(now())
  UserCompany UserCompany[]
  User        User[]        @relation("UserCompanies")
  Overview    Overview[]    @relation("Company")
  Purchase    Purchase[]    @relation("Company")
}

model UserCompany {
  userId    String
  companyId String
  Company   Company @relation(fields: [companyId], references: [id])
  User      User    @relation(fields: [userId], references: [id])

  @@id([userId, companyId])
}

enum Status {
  Aberta
  Recebida
  Faturada
  Cancelada
  Pedido_atendido
  Pedido_aberto
  Pedido_aprovado
  Pedido_rejeitado
  Pedido_encerrado
}
