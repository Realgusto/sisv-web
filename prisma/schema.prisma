generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  password        String
  admin           Boolean       @default(false)
  active          Boolean       @default(true)
  updated_at      DateTime      @default(now())
  purchases       Purchase[]    @relation("UserPurchases")
  UserCompany     UserCompany[]
  Company         Company[]     @relation("UserCompanies")
  Purchase        Purchase[]    @relation("ApprovalUserPurchases")
  Service         Service[]     @relation("UserServices")
  ServiceUser     Service[]     @relation("ServiceUser")
  ApprovalService Service[]     @relation("ApprovalServiceUser")
}

model Purchase {
  id               String          @id @default(cuid())
  sequence         Int             @default(autoincrement())
  companyId        String
  company          Company         @relation("Company", fields: [companyId], references: [id])
  user_id          String
  user             User            @relation("UserPurchases", fields: [user_id], references: [id])
  approval_user_id String?
  approval_user    User?           @relation("ApprovalUserPurchases", fields: [approval_user_id], references: [id])
  date             DateTime
  delivery_date    DateTime
  department       String?
  supplier         String?
  total_value      Float?
  observations     String?
  status           StatusPurchase?
  updated_at       DateTime?       @default(now()) @updatedAt
  PurchaseItems    PurchaseItems[]
}

model PurchaseItems {
  id         String   @default(cuid())
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  product    String
  quantity   Float
  unitPrice  Float
  total      Float
  updated_at DateTime @default(now()) @updatedAt

  @@id([id, purchaseId])
}

model Overview {
  id                String   @id
  companyId         String
  company           Company  @relation("Company", fields: [companyId], references: [id])
  salesMonthly      Float
  averageTicket     Float
  salesLastYear     Json[]
  top5BestSeller    Json[]
  activeCustomers   Int
  inactiveCustomers Int
  expenses          Float
  shopping          Float
  payment           Float    @default(0)
  receipt           Float    @default(0)
  updated_at        DateTime @default(now()) @updatedAt
}

model Company {
  id          String        @id
  cnpj        String        @unique
  name        String
  fantasy     String
  address     String
  city        String
  state       String
  phone       String
  email       String
  active      Boolean       @default(true)
  updated_at  DateTime      @default(now())
  UserCompany UserCompany[]
  User        User[]        @relation("UserCompanies")
  Overview    Overview[]    @relation("Company")
  Purchase    Purchase[]    @relation("Company")
  Service     Service[]     @relation("Company")
}

model UserCompany {
  userId    String
  companyId String
  Company   Company @relation(fields: [companyId], references: [id])
  User      User    @relation(fields: [userId], references: [id])

  @@id([userId, companyId])
}

model Service {
  id                  String        @id @default(cuid())
  sequence            Int           @default(autoincrement())
  companyId           String
  company             Company       @relation("Company", fields: [companyId], references: [id])
  user_id             String
  user                User          @relation("UserServices", fields: [user_id], references: [id])
  service_user_id     String?
  service_user        User?         @relation("ServiceUser", fields: [service_user_id], references: [id])
  approval_user_id    String?
  approval_user       User?         @relation("ApprovalServiceUser", fields: [approval_user_id], references: [id])
  date                DateTime      @default(now())
  end_date            DateTime?
  department          String?
  equipment           String?
  criticality         String?
  service_type        String?
  equipment_status    String?
  service_description String?
  observations        String?
  status              StatusService
  updated_at          DateTime      @default(now()) @updatedAt
}

enum StatusService {
  Aberta
  Programada
  Em_andamento
  Concluida
  Concluida_parcialmente
  Cancelada
}

enum StatusPurchase {
  Aberta
  Recebida
  Autorizada
  Faturada
  Cancelada
  Pedido_aberto
  Pedido_aprovado
  Pedido_rejeitado
  Pedido_encerrado
}
